// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –ê–ü–°
import React, { useState } from 'react'
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,
  PieChart, Pie, Cell, LineChart, Line, ResponsiveContainer,
  AreaChart, Area
} from 'recharts'
import './ResultsVisualizer.css'

const ResultsVisualizer = ({ results, project }) => {
  const [activeTab, setActiveTab] = useState('overview')

  if (!results) {
    return (
      <div className="results-placeholder">
        <p>–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
      </div>
    )
  }

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const equipmentData = [
    { name: '–î—ã–º–æ–≤—ã–µ –∏–∑–≤–µ—â–∞—Ç–µ–ª–∏', value: results.smokeDetectors, color: '#1677ff' },
    { name: '–¢–µ–ø–ª–æ–≤—ã–µ –∏–∑–≤–µ—â–∞—Ç–µ–ª–∏', value: results.heatDetectors, color: '#fa8c16' },
    { name: '–†—É—á–Ω—ã–µ –∏–∑–≤–µ—â–∞—Ç–µ–ª–∏', value: results.manualCallPoints, color: '#ff4d4f' },
    { name: '–ó–≤—É–∫–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–∞—Ç–µ–ª–∏', value: results.sounders, color: '#52c41a' },
    { name: '–ü–ü–ö–ü', value: results.controlPanels, color: '#722ed1' }
  ]

  const costBredownData = [
    { name: '–ò–∑–≤–µ—â–∞—Ç–µ–ª–∏', value: (results.smokeDetectors * 2500 + results.heatDetectors * 1800), color: '#1677ff' },
    { name: '–û–ø–æ–≤–µ—â–∞—Ç–µ–ª–∏', value: results.sounders * 800, color: '#52c41a' },
    { name: '–ü–ü–ö–ü', value: results.controlPanels * 45000, color: '#722ed1' },
    { name: '–ö–∞–±–µ–ª—å', value: results.cableLength * 150, color: '#fa8c16' },
    { name: '–ü—Ä–æ—á–µ–µ', value: results.totalCost * 0.1, color: '#8c8c8c' }
  ]

  const comparisonData = [
    {
      category: '–ò–∑–≤–µ—â–∞—Ç–µ–ª–∏',
      '–î—ã–º–æ–≤—ã–µ': results.smokeDetectors,
      '–¢–µ–ø–ª–æ–≤—ã–µ': results.heatDetectors
    },
    {
      category: '–°–∏—Å—Ç–µ–º–∞',
      '–ó–æ–Ω—ã': results.zones,
      '–ü–ü–ö–ü': results.controlPanels
    },
    {
      category: '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ',
      '–ó–≤—É–∫–æ–≤—ã–µ': results.sounders,
      '–†—É—á–Ω—ã–µ': results.manualCallPoints
    }
  ]

  const formatCurrency = (value) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0
    }).format(value)
  }

  const formatNumber = (value) => {
    return new Intl.NumberFormat('ru-RU').format(value)
  }

  const tabs = [
    { id: 'overview', label: '–û–±–∑–æ—Ä', icon: 'üìä' },
    { id: 'equipment', label: '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', icon: 'üîß' },
    { id: 'costs', label: '–°—Ç–æ–∏–º–æ—Å—Ç—å', icon: 'üí∞' },
    { id: 'technical', label: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', icon: '‚öôÔ∏è' }
  ]

  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      return (
        <div className="custom-tooltip">
          <p className="tooltip-label">{label}</p>
          {payload.map((entry, index) => (
            <p key={index} style={{ color: entry.color }}>
              {entry.name}: {formatNumber(entry.value)}
            </p>
          ))}
        </div>
      )
    }
    return null
  }

  const renderOverview = () => (
    <div className="results-overview">
      <div className="summary-cards">
        <div className="summary-card primary">
          <div className="card-icon">üî•</div>
          <div className="card-content">
            <h3>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</h3>
            <div className="card-value">{formatCurrency(results.totalCost)}</div>
            <div className="card-subtitle">
              {formatCurrency(results.summary?.costPerSquareMeter || 0)}/–º¬≤
            </div>
          </div>
        </div>

        <div className="summary-card">
          <div className="card-icon">üîç</div>
          <div className="card-content">
            <h3>–í—Å–µ–≥–æ –∏–∑–≤–µ—â–∞—Ç–µ–ª–µ–π</h3>
            <div className="card-value">{formatNumber(results.summary?.totalDetectors || 0)}</div>
            <div className="card-subtitle">
              {Math.round((results.summary?.coverageArea || 0) / (results.summary?.totalDetectors || 1))} –º¬≤/–∏–∑–≤–µ—â–∞—Ç–µ–ª—å
            </div>
          </div>
        </div>

        <div className="summary-card">
          <div className="card-icon">üèóÔ∏è</div>
          <div className="card-content">
            <h3>–ó–æ–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª—è</h3>
            <div className="card-value">{formatNumber(results.zones)}</div>
            <div className="card-subtitle">
              {results.controlPanels} –ü–ü–ö–ü
            </div>
          </div>
        </div>

        <div className="summary-card">
          <div className="card-icon">üîå</div>
          <div className="card-content">
            <h3>–ö–∞–±–µ–ª—å</h3>
            <div className="card-value">{formatNumber(results.cableLength)} –º</div>
            <div className="card-subtitle">
              —Å –∑–∞–ø–∞—Å–æ–º 15%
            </div>
          </div>
        </div>
      </div>

      <div className="charts-grid">
        <div className="chart-container">
          <h4>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h4>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={equipmentData}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
              >
                {equipmentData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </div>

        <div className="chart-container">
          <h4>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h4>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={comparisonData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="category" />
              <YAxis />
              <Tooltip content={<CustomTooltip />} />
              <Legend />
              <Bar dataKey="–î—ã–º–æ–≤—ã–µ" fill="#1677ff" />
              <Bar dataKey="–¢–µ–ø–ª–æ–≤—ã–µ" fill="#fa8c16" />
              <Bar dataKey="–ó–æ–Ω—ã" fill="#52c41a" />
              <Bar dataKey="–ü–ü–ö–ü" fill="#722ed1" />
              <Bar dataKey="–ó–≤—É–∫–æ–≤—ã–µ" fill="#13c2c2" />
              <Bar dataKey="–†—É—á–Ω—ã–µ" fill="#ff4d4f" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  )

  const renderEquipment = () => (
    <div className="equipment-details">
      <div className="equipment-table">
        <table>
          <thead>
            <tr>
              <th>–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</th>
              <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
              <th>–ï–¥–∏–Ω–∏—Ü–∞</th>
              <th>–¶–µ–Ω–∞ –∑–∞ –µ–¥.</th>
              <th>–°—É–º–º–∞</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>–î—ã–º–æ–≤—ã–µ –∏–∑–≤–µ—â–∞—Ç–µ–ª–∏</td>
              <td>{formatNumber(results.smokeDetectors)}</td>
              <td>—à—Ç</td>
              <td>{formatCurrency(2500)}</td>
              <td>{formatCurrency(results.smokeDetectors * 2500)}</td>
            </tr>
            <tr>
              <td>–¢–µ–ø–ª–æ–≤—ã–µ –∏–∑–≤–µ—â–∞—Ç–µ–ª–∏</td>
              <td>{formatNumber(results.heatDetectors)}</td>
              <td>—à—Ç</td>
              <td>{formatCurrency(1800)}</td>
              <td>{formatCurrency(results.heatDetectors * 1800)}</td>
            </tr>
            <tr>
              <td>–†—É—á–Ω—ã–µ –∏–∑–≤–µ—â–∞—Ç–µ–ª–∏</td>
              <td>{formatNumber(results.manualCallPoints)}</td>
              <td>—à—Ç</td>
              <td>{formatCurrency(1200)}</td>
              <td>{formatCurrency(results.manualCallPoints * 1200)}</td>
            </tr>
            <tr>
              <td>–ó–≤—É–∫–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–∞—Ç–µ–ª–∏</td>
              <td>{formatNumber(results.sounders)}</td>
              <td>—à—Ç</td>
              <td>{formatCurrency(800)}</td>
              <td>{formatCurrency(results.sounders * 800)}</td>
            </tr>
            <tr>
              <td>–ü–ü–ö–ü</td>
              <td>{formatNumber(results.controlPanels)}</td>
              <td>—à—Ç</td>
              <td>{formatCurrency(45000)}</td>
              <td>{formatCurrency(results.controlPanels * 45000)}</td>
            </tr>
            <tr>
              <td>–ö–∞–±–µ–ª—å –ø–æ–∂–∞—Ä–Ω—ã–π</td>
              <td>{formatNumber(results.cableLength)}</td>
              <td>–º</td>
              <td>{formatCurrency(150)}</td>
              <td>{formatCurrency(results.cableLength * 150)}</td>
            </tr>
          </tbody>
          <tfoot>
            <tr>
              <td colSpan="4"><strong>–ò—Ç–æ–≥–æ:</strong></td>
              <td><strong>{formatCurrency(results.totalCost)}</strong></td>
            </tr>
          </tfoot>
        </table>
      </div>

      <div className="equipment-chart">
        <h4>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h4>
        <ResponsiveContainer width="100%" height={400}>
          <BarChart data={equipmentData} layout="horizontal">
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis type="number" />
            <YAxis dataKey="name" type="category" width={150} />
            <Tooltip content={<CustomTooltip />} />
            <Bar dataKey="value" fill="#1677ff" />
          </BarChart>
        </ResponsiveContainer>
      </div>
    </div>
  )

  const renderCosts = () => (
    <div className="costs-analysis">
      <div className="cost-breakdown">
        <h4>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏</h4>
        <ResponsiveContainer width="100%" height={400}>
          <PieChart>
            <Pie
              data={costBredownData}
              cx="50%"
              cy="50%"
              labelLine={false}
              label={({ name, percent, value }) =>
                `${name}: ${formatCurrency(value)} (${(percent * 100).toFixed(1)}%)`
              }
              outerRadius={120}
              fill="#8884d8"
              dataKey="value"
            >
              {costBredownData.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={entry.color} />
              ))}
            </Pie>
            <Tooltip formatter={(value) => formatCurrency(value)} />
          </PieChart>
        </ResponsiveContainer>
      </div>

      <div className="cost-metrics">
        <div className="metric-card">
          <h5>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤</h5>
          <div className="metric-value">
            {formatCurrency(results.summary?.costPerSquareMeter || 0)}
          </div>
        </div>

        <div className="metric-card">
          <h5>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∏–∑–≤–µ—â–∞—Ç–µ–ª—å</h5>
          <div className="metric-value">
            {formatCurrency(Math.round(results.totalCost / (results.summary?.totalDetectors || 1)))}
          </div>
        </div>

        <div className="metric-card">
          <h5>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∑–æ–Ω—É</h5>
          <div className="metric-value">
            {formatCurrency(Math.round(results.totalCost / results.zones))}
          </div>
        </div>
      </div>
    </div>
  )

  const renderTechnical = () => (
    <div className="technical-data">
      <div className="tech-specs">
        <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h4>

        <div className="specs-grid">
          <div className="spec-group">
            <h5>–ü–æ–∫—Ä—ã—Ç–∏–µ</h5>
            <div className="spec-item">
              <span>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å:</span>
              <span>{formatNumber(results.summary?.coverageArea || 0)} –º¬≤</span>
            </div>
            <div className="spec-item">
              <span>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑–≤–µ—â–∞—Ç–µ–ª–µ–π:</span>
              <span>{Math.round((results.summary?.coverageArea || 0) / (results.summary?.totalDetectors || 1))} –º¬≤/–∏–∑–≤–µ—â–∞—Ç–µ–ª—å</span>
            </div>
            <div className="spec-item">
              <span>–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥—ã–º/—Ç–µ–ø–ª–æ:</span>
              <span>{Math.round((results.smokeDetectors / (results.smokeDetectors + results.heatDetectors)) * 100)}% / {Math.round((results.heatDetectors / (results.smokeDetectors + results.heatDetectors)) * 100)}%</span>
            </div>
          </div>

          <div className="spec-group">
            <h5>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h5>
            <div className="spec-item">
              <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–Ω:</span>
              <span>{formatNumber(results.zones)}</span>
            </div>
            <div className="spec-item">
              <span>–ü–ü–ö–ü:</span>
              <span>{formatNumber(results.controlPanels)} —à—Ç</span>
            </div>
            <div className="spec-item">
              <span>–ó–æ–Ω –Ω–∞ –ü–ü–ö–ü:</span>
              <span>{Math.round(results.zones / results.controlPanels)}</span>
            </div>
          </div>

          <div className="spec-group">
            <h5>–ö–∞–±–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</h5>
            <div className="spec-item">
              <span>–û–±—â–∞—è –¥–ª–∏–Ω–∞:</span>
              <span>{formatNumber(results.cableLength)} –º</span>
            </div>
            <div className="spec-item">
              <span>–ó–∞–ø–∞—Å –∫–∞–±–µ–ª—è:</span>
              <span>15%</span>
            </div>
            <div className="spec-item">
              <span>–ú–µ—Ç—Ä–æ–≤ –Ω–∞ –º¬≤ –ø–ª–æ—â–∞–¥–∏:</span>
              <span>{(results.cableLength / (results.summary?.coverageArea || 1)).toFixed(2)} –º/–º¬≤</span>
            </div>
          </div>

          <div className="spec-group">
            <h5>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ</h5>
            <div className="spec-item">
              <span>–ó–≤—É–∫–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–∞—Ç–µ–ª–∏:</span>
              <span>{formatNumber(results.sounders)} —à—Ç</span>
            </div>
            <div className="spec-item">
              <span>–†—É—á–Ω—ã–µ –∏–∑–≤–µ—â–∞—Ç–µ–ª–∏:</span>
              <span>{formatNumber(results.manualCallPoints)} —à—Ç</span>
            </div>
            <div className="spec-item">
              <span>–ü–æ–∫—Ä—ã—Ç–∏–µ –æ–ø–æ–≤–µ—â–∞—Ç–µ–ª—è:</span>
              <span>~{Math.round((results.summary?.coverageArea || 0) / results.sounders)} –º¬≤</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )

  return (
    <div className="results-visualizer">
      <div className="results-header">
        <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –ê–ü–°</h3>
        {project && (
          <div className="project-badge">
            {project.name} - {project.object_name}
          </div>
        )}
      </div>

      <div className="results-tabs">
        {tabs.map(tab => (
          <button
            key={tab.id}
            className={`tab-button ${activeTab === tab.id ? 'active' : ''}`}
            onClick={() => setActiveTab(tab.id)}
          >
            <span className="tab-icon">{tab.icon}</span>
            <span className="tab-label">{tab.label}</span>
          </button>
        ))}
      </div>

      <div className="results-content">
        {activeTab === 'overview' && renderOverview()}
        {activeTab === 'equipment' && renderEquipment()}
        {activeTab === 'costs' && renderCosts()}
        {activeTab === 'technical' && renderTechnical()}
      </div>
    </div>
  )
}

export default ResultsVisualizer