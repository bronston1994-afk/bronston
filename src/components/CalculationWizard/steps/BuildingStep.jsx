// –®–∞–≥ –º–∞—Å—Ç–µ—Ä–∞: –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
import React, { useState } from 'react'

const BuildingStep = ({ data, onUpdate, errors }) => {
  const [activeTab, setActiveTab] = useState('basic')
  const [useDetailedApartments, setUseDetailedApartments] = useState(false)
  const [useDetailedRooms, setUseDetailedRooms] = useState(false)
  const [useDetailedCorpuses, setUseDetailedCorpuses] = useState(false)

  const handleInputChange = (field, value) => {
    onUpdate('building', { ...data.building, [field]: value })
  }

  const handleComplexChange = (category, field, value) => {
    onUpdate('building', {
      ...data.building,
      [category]: {
        ...data.building[category],
        [field]: value
      }
    })
  }

  const buildingTypes = [
    { code: '–§1.1', name: '–î–µ—Ç—Å–∫–∏–µ –¥–æ—à–∫–æ–ª—å–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è' },
    { code: '–§1.2', name: '–ì–æ—Å—Ç–∏–Ω–∏—Ü—ã, –æ–±—â–µ–∂–∏—Ç–∏—è' },
    { code: '–§1.3', name: '–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–µ –∂–∏–ª—ã–µ –¥–æ–º–∞' },
    { code: '–§1.4', name: '–û–¥–Ω–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–µ –∂–∏–ª—ã–µ –¥–æ–º–∞' },
    { code: '–§2.1', name: '–¢–µ–∞—Ç—Ä—ã, –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã' },
    { code: '–§3.1', name: '–ë–æ–ª—å–Ω–∏—Ü—ã' },
    { code: '–§4.1', name: '–®–∫–æ–ª—ã' },
    { code: '–§5.1', name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∑–¥–∞–Ω–∏—è' },
    { code: '–§5.2', name: '–ë–∞–Ω–∫–∏' },
    { code: '–§5.3', name: '–û–±—ä–µ–∫—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏' }
  ]

  const tabs = [
    { id: 'basic', title: '–û—Å–Ω–æ–≤–Ω—ã–µ', icon: 'üè¢' },
    { id: 'apartments', title: '–ö–≤–∞—Ä—Ç–∏—Ä—ã', icon: 'üè†' },
    { id: 'rooms', title: '–ü–æ–º–µ—â–µ–Ω–∏—è', icon: 'üì¶' },
    { id: 'technical', title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ', icon: '‚öôÔ∏è' },
    { id: 'corpuses', title: '–ö–æ—Ä–ø—É—Å–∞', icon: 'üèóÔ∏è' }
  ]

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  React.useEffect(() => {
    if (!data.building) {
      onUpdate('building', {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        aboveGroundArea: 5000,
        undergroundArea: 0,
        aboveGroundFloors: 10,
        undergroundFloors: 0,
        apartmentsCount: 100,
        ceilingHeight: 3.0,
        buildingType: '–§1.3',
        rooms: 50,

        // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
        apartments: {
          apartment1Room: 25,
          apartment2Room: 50,
          apartment3Room: 20,
          apartment4Room: 5,
          apartment5Room: 0,
          apartment6Room: 0,
          apartment7Room: 0
        },

        // –û–±—â–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è
        commonRooms: {
          stairwellCount: 20,
          stairwellArea: 15,
          elevatorHallCount: 10,
          elevatorHallArea: 25,
          commonCorridorCount: 35,
          commonCorridorArea: 120
        },

        // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è
        technical: {
          ventilationCount: 15,
          ventilationArea: 35,
          electricalCount: 12,
          electricalArea: 20,
          heatingCount: 8,
          heatingArea: 50,
          pumpingCount: 4,
          pumpingArea: 30,
          transformerCount: 2,
          transformerArea: 80,
          telecomCount: 10,
          telecomArea: 15,
          waterCount: 6,
          waterArea: 25,
          techFloorCount: 3,
          techFloorArea: 500
        },

        // –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–∞—Ä–∫–æ–≤–∫–∞
        storage: {
          storageCount: 800,
          storageArea: 4,
          wasteRoomCount: 11,
          wasteRoomArea: 12,
          parkingUndergroundCount: 1,
          parkingUndergroundArea: 8000
        },

        // –û—Ö—Ä–∞–Ω–∞ –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è
        security: {
          securityPostCount: 6,
          securityPostArea: 8,
          staffRoomCount: 4,
          staffRoomArea: 12
        },

        // –ö–æ—Ä–ø—É—Å–∞
        corpuses: {
          buildingCorpuses: 3,
          corpusesFloors: {
            corpus1: 16,
            corpus2: 18,
            corpus3: 20
          }
        }
      })
    }
  }, [])

  const renderBasicTab = () => (
    <div className="tab-content">
      <div className="form-section">
        <h3>üè¢ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è</h3>

        <div className="form-row">
          <div className="form-group">
            <label>–ü–ª–æ—â–∞–¥—å –Ω–∞–¥–∑–µ–º–Ω–æ–π —á–∞—Å—Ç–∏ (–º¬≤) *</label>
            <input
              type="number"
              value={data.building?.aboveGroundArea || 5000}
              onChange={(e) => handleInputChange('aboveGroundArea', Number(e.target.value))}
              className={errors?.aboveGroundArea ? 'error' : ''}
              min="1"
            />
            {errors?.aboveGroundArea && (
              <span className="error-message">{errors.aboveGroundArea}</span>
            )}
          </div>

          <div className="form-group">
            <label>–ü–ª–æ—â–∞–¥—å –ø–æ–¥–∑–µ–º–Ω–æ–π –∞–≤—Ç–æ—Å—Ç–æ—è–Ω–∫–∏ (–º¬≤)</label>
            <input
              type="number"
              value={data.building?.undergroundArea || 0}
              onChange={(e) => handleInputChange('undergroundArea', Number(e.target.value))}
              min="0"
            />
          </div>
        </div>

        <div className="form-row">
          <div className="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–¥–∑–µ–º–Ω—ã—Ö —ç—Ç–∞–∂–µ–π *</label>
            <input
              type="number"
              value={data.building?.aboveGroundFloors || 10}
              onChange={(e) => handleInputChange('aboveGroundFloors', Number(e.target.value))}
              className={errors?.aboveGroundFloors ? 'error' : ''}
              min="1"
            />
          </div>

          <div className="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∑–µ–º–Ω—ã—Ö —ç—Ç–∞–∂–µ–π</label>
            <input
              type="number"
              value={data.building?.undergroundFloors || 0}
              onChange={(e) => handleInputChange('undergroundFloors', Number(e.target.value))}
              min="0"
            />
          </div>
        </div>

        <div className="form-row">
          <div className="form-group">
            <label>–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)</label>
            <input
              type="number"
              step="0.1"
              value={data.building?.ceilingHeight || 3.0}
              onChange={(e) => handleInputChange('ceilingHeight', Number(e.target.value))}
              min="2.5"
              max="6"
            />
          </div>

          <div className="form-group">
            <label>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ *</label>
            <select
              value={data.building?.buildingType || '–§1.3'}
              onChange={(e) => handleInputChange('buildingType', e.target.value)}
              className={errors?.buildingType ? 'error' : ''}
            >
              {buildingTypes.map(type => (
                <option key={type.code} value={type.code}>
                  {type.code} - {type.name}
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className="form-row">
          <div className="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä/–ø–æ–º–µ—â–µ–Ω–∏–π</label>
            <input
              type="number"
              value={data.building?.apartmentsCount || 100}
              onChange={(e) => handleInputChange('apartmentsCount', Number(e.target.value))}
              min="1"
            />
          </div>

          <div className="form-group">
            <label>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–µ—â–µ–Ω–∏–π</label>
            <input
              type="number"
              value={data.building?.rooms || 50}
              onChange={(e) => handleInputChange('rooms', Number(e.target.value))}
              min="1"
            />
          </div>
        </div>
      </div>

      <div className="step-summary">
        <h4>üìä –ò—Ç–æ–≥–æ –ø–æ –∑–¥–∞–Ω–∏—é:</h4>
        <div className="summary-grid">
          <div className="summary-item">
            <span>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å:</span>
            <span>{((data.building?.aboveGroundArea || 0) + (data.building?.undergroundArea || 0)).toLocaleString()} –º¬≤</span>
          </div>
          <div className="summary-item">
            <span>–û–±—â–∞—è —ç—Ç–∞–∂–Ω–æ—Å—Ç—å:</span>
            <span>{(data.building?.aboveGroundFloors || 0) + (data.building?.undergroundFloors || 0)} —ç—Ç.</span>
          </div>
          <div className="summary-item">
            <span>–û–±—ä–µ–º –∑–¥–∞–Ω–∏—è:</span>
            <span>{(((data.building?.aboveGroundArea || 0) + (data.building?.undergroundArea || 0)) * (data.building?.ceilingHeight || 3)).toLocaleString()} –º¬≥</span>
          </div>
        </div>
      </div>
    </div>
  )

  const renderApartmentsTab = () => (
    <div className="tab-content">
      <div className="form-section">
        <h3>üè† –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –∫–æ–º–Ω–∞—Ç–Ω–æ—Å—Ç–∏</h3>

        <div className="toggle-section">
          <label className="toggle-label">
            <input
              type="checkbox"
              checked={useDetailedApartments}
              onChange={(e) => setUseDetailedApartments(e.target.checked)}
            />
            <span>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –∫–æ–º–Ω–∞—Ç–Ω–æ—Å—Ç–∏</span>
          </label>
        </div>

        {useDetailedApartments && (
          <>
            <div className="form-row">
              <div className="form-group">
                <label>1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã</label>
                <input
                  type="number"
                  value={data.building?.apartments?.apartment1Room || 25}
                  onChange={(e) => handleComplexChange('apartments', 'apartment1Room', Number(e.target.value))}
                  min="0"
                />
              </div>

              <div className="form-group">
                <label>2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã</label>
                <input
                  type="number"
                  value={data.building?.apartments?.apartment2Room || 50}
                  onChange={(e) => handleComplexChange('apartments', 'apartment2Room', Number(e.target.value))}
                  min="0"
                />
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>3-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã</label>
                <input
                  type="number"
                  value={data.building?.apartments?.apartment3Room || 20}
                  onChange={(e) => handleComplexChange('apartments', 'apartment3Room', Number(e.target.value))}
                  min="0"
                />
              </div>

              <div className="form-group">
                <label>4-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã</label>
                <input
                  type="number"
                  value={data.building?.apartments?.apartment4Room || 5}
                  onChange={(e) => handleComplexChange('apartments', 'apartment4Room', Number(e.target.value))}
                  min="0"
                />
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>5-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã</label>
                <input
                  type="number"
                  value={data.building?.apartments?.apartment5Room || 0}
                  onChange={(e) => handleComplexChange('apartments', 'apartment5Room', Number(e.target.value))}
                  min="0"
                />
              </div>

              <div className="form-group">
                <label>6-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã</label>
                <input
                  type="number"
                  value={data.building?.apartments?.apartment6Room || 0}
                  onChange={(e) => handleComplexChange('apartments', 'apartment6Room', Number(e.target.value))}
                  min="0"
                />
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>7-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã</label>
                <input
                  type="number"
                  value={data.building?.apartments?.apartment7Room || 0}
                  onChange={(e) => handleComplexChange('apartments', 'apartment7Room', Number(e.target.value))}
                  min="0"
                />
              </div>
            </div>

            <div className="apartments-summary">
              <h4>üìä –ò—Ç–æ–≥–æ –∫–≤–∞—Ä—Ç–∏—Ä:</h4>
              <div className="summary-grid">
                <div className="summary-item">
                  <span>–í—Å–µ–≥–æ –∫–≤–∞—Ä—Ç–∏—Ä:</span>
                  <span>{
                    (data.building?.apartments?.apartment1Room || 0) +
                    (data.building?.apartments?.apartment2Room || 0) +
                    (data.building?.apartments?.apartment3Room || 0) +
                    (data.building?.apartments?.apartment4Room || 0) +
                    (data.building?.apartments?.apartment5Room || 0) +
                    (data.building?.apartments?.apartment6Room || 0) +
                    (data.building?.apartments?.apartment7Room || 0)
                  }</span>
                </div>
                <div className="summary-item">
                  <span>–°—Ä–µ–¥–Ω—è—è –∫–æ–º–Ω–∞—Ç–Ω–æ—Å—Ç—å:</span>
                  <span>{
                    (() => {
                      const total = (data.building?.apartments?.apartment1Room || 0) +
                        (data.building?.apartments?.apartment2Room || 0) +
                        (data.building?.apartments?.apartment3Room || 0) +
                        (data.building?.apartments?.apartment4Room || 0) +
                        (data.building?.apartments?.apartment5Room || 0) +
                        (data.building?.apartments?.apartment6Room || 0) +
                        (data.building?.apartments?.apartment7Room || 0);

                      if (total === 0) return '0';

                      const weighted = (data.building?.apartments?.apartment1Room || 0) * 1 +
                        (data.building?.apartments?.apartment2Room || 0) * 2 +
                        (data.building?.apartments?.apartment3Room || 0) * 3 +
                        (data.building?.apartments?.apartment4Room || 0) * 4 +
                        (data.building?.apartments?.apartment5Room || 0) * 5 +
                        (data.building?.apartments?.apartment6Room || 0) * 6 +
                        (data.building?.apartments?.apartment7Room || 0) * 7;

                      return (weighted / total).toFixed(1);
                    })()
                  }</span>
                </div>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  )

  const renderRoomsTab = () => (
    <div className="tab-content">
      <div className="form-section">
        <h3>üì¶ –û–±—â–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è</h3>

        <div className="toggle-section">
          <label className="toggle-label">
            <input
              type="checkbox"
              checked={useDetailedRooms}
              onChange={(e) => setUseDetailedRooms(e.target.checked)}
            />
            <span>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–º–µ—â–µ–Ω–∏–π</span>
          </label>
        </div>

        {useDetailedRooms && (
          <>
            <h4>üèÉ –≠–≤–∞–∫—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—É—Ç–∏</h4>
            <div className="form-row">
              <div className="form-group">
                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Å—Ç–Ω–∏—á–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫</label>
                <input
                  type="number"
                  value={data.building?.commonRooms?.stairwellCount || 20}
                  onChange={(e) => handleComplexChange('commonRooms', 'stairwellCount', Number(e.target.value))}
                  min="0"
                />
              </div>

              <div className="form-group">
                <label>–ü–ª–æ—â–∞–¥—å –ª–µ—Å—Ç–Ω–∏—á–Ω–æ–π –∫–ª–µ—Ç–∫–∏ (–º¬≤)</label>
                <input
                  type="number"
                  value={data.building?.commonRooms?.stairwellArea || 15}
                  onChange={(e) => handleComplexChange('commonRooms', 'stairwellArea', Number(e.target.value))}
                  min="0"
                />
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ñ—Ç–æ–≤—ã—Ö —Ö–æ–ª–ª–æ–≤</label>
                <input
                  type="number"
                  value={data.building?.commonRooms?.elevatorHallCount || 10}
                  onChange={(e) => handleComplexChange('commonRooms', 'elevatorHallCount', Number(e.target.value))}
                  min="0"
                />
              </div>

              <div className="form-group">
                <label>–ü–ª–æ—â–∞–¥—å –ª–∏—Ñ—Ç–æ–≤–æ–≥–æ —Ö–æ–ª–ª–∞ (–º¬≤)</label>
                <input
                  type="number"
                  value={data.building?.commonRooms?.elevatorHallArea || 25}
                  onChange={(e) => handleComplexChange('commonRooms', 'elevatorHallArea', Number(e.target.value))}
                  min="0"
                />
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–∏–¥–æ—Ä–æ–≤</label>
                <input
                  type="number"
                  value={data.building?.commonRooms?.commonCorridorCount || 35}
                  onChange={(e) => handleComplexChange('commonRooms', 'commonCorridorCount', Number(e.target.value))}
                  min="0"
                />
              </div>

              <div className="form-group">
                <label>–ü–ª–æ—â–∞–¥—å –∫–æ—Ä–∏–¥–æ—Ä–∞ (–º¬≤)</label>
                <input
                  type="number"
                  value={data.building?.commonRooms?.commonCorridorArea || 120}
                  onChange={(e) => handleComplexChange('commonRooms', 'commonCorridorArea', Number(e.target.value))}
                  min="0"
                />
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  )

  const renderTechnicalTab = () => (
    <div className="tab-content">
      <div className="form-section">
        <h3>‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è</h3>

        <h4>üå¨Ô∏è –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
        <div className="form-row">
          <div className="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–Ω—Ç–∫–∞–º–µ—Ä</label>
            <input
              type="number"
              value={data.building?.technical?.ventilationCount || 15}
              onChange={(e) => handleComplexChange('technical', 'ventilationCount', Number(e.target.value))}
              min="0"
            />
          </div>

          <div className="form-group">
            <label>–ü–ª–æ—â–∞–¥—å –≤–µ–Ω—Ç–∫–∞–º–µ—Ä—ã (–º¬≤)</label>
            <input
              type="number"
              value={data.building?.technical?.ventilationArea || 35}
              onChange={(e) => handleComplexChange('technical', 'ventilationArea', Number(e.target.value))}
              min="0"
            />
          </div>
        </div>

        <h4>‚ö° –≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h4>
        <div className="form-row">
          <div className="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ—â–∏—Ç–æ–≤—ã—Ö</label>
            <input
              type="number"
              value={data.building?.technical?.electricalCount || 12}
              onChange={(e) => handleComplexChange('technical', 'electricalCount', Number(e.target.value))}
              min="0"
            />
          </div>

          <div className="form-group">
            <label>–ü–ª–æ—â–∞–¥—å —ç–ª–µ–∫—Ç—Ä–æ—â–∏—Ç–æ–≤–æ–π (–º¬≤)</label>
            <input
              type="number"
              value={data.building?.technical?.electricalArea || 20}
              onChange={(e) => handleComplexChange('technical', 'electricalArea', Number(e.target.value))}
              min="0"
            />
          </div>
        </div>

        <div className="form-row">
          <div className="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–Ω—ã—Ö</label>
            <input
              type="number"
              value={data.building?.technical?.transformerCount || 2}
              onChange={(e) => handleComplexChange('technical', 'transformerCount', Number(e.target.value))}
              min="0"
            />
          </div>

          <div className="form-group">
            <label>–ü–ª–æ—â–∞–¥—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–Ω–æ–π (–º¬≤)</label>
            <input
              type="number"
              value={data.building?.technical?.transformerArea || 80}
              onChange={(e) => handleComplexChange('technical', 'transformerArea', Number(e.target.value))}
              min="0"
            />
          </div>
        </div>

        <h4>üî• –û—Ç–æ–ø–ª–µ–Ω–∏–µ –∏ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ</h4>
        <div className="form-row">
          <div className="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ò–¢–ü</label>
            <input
              type="number"
              value={data.building?.technical?.heatingCount || 8}
              onChange={(e) => handleComplexChange('technical', 'heatingCount', Number(e.target.value))}
              min="0"
            />
          </div>

          <div className="form-group">
            <label>–ü–ª–æ—â–∞–¥—å –ò–¢–ü (–º¬≤)</label>
            <input
              type="number"
              value={data.building?.technical?.heatingArea || 50}
              onChange={(e) => handleComplexChange('technical', 'heatingArea', Number(e.target.value))}
              min="0"
            />
          </div>
        </div>

        <div className="form-row">
          <div className="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å–æ—Å–Ω—ã—Ö</label>
            <input
              type="number"
              value={data.building?.technical?.pumpingCount || 4}
              onChange={(e) => handleComplexChange('technical', 'pumpingCount', Number(e.target.value))}
              min="0"
            />
          </div>

          <div className="form-group">
            <label>–ü–ª–æ—â–∞–¥—å –Ω–∞—Å–æ—Å–Ω–æ–π (–º¬≤)</label>
            <input
              type="number"
              value={data.building?.technical?.pumpingArea || 30}
              onChange={(e) => handleComplexChange('technical', 'pumpingArea', Number(e.target.value))}
              min="0"
            />
          </div>
        </div>

        <div className="form-row">
          <div className="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–æ–º–µ—Ä–Ω—ã—Ö —É–∑–ª–æ–≤</label>
            <input
              type="number"
              value={data.building?.technical?.waterCount || 6}
              onChange={(e) => handleComplexChange('technical', 'waterCount', Number(e.target.value))}
              min="0"
            />
          </div>

          <div className="form-group">
            <label>–ü–ª–æ—â–∞–¥—å –≤–æ–¥–æ–º–µ—Ä–Ω–æ–≥–æ —É–∑–ª–∞ (–º¬≤)</label>
            <input
              type="number"
              value={data.building?.technical?.waterArea || 25}
              onChange={(e) => handleComplexChange('technical', 'waterArea', Number(e.target.value))}
              min="0"
            />
          </div>
        </div>

        <h4>üì° –°–≤—è–∑—å –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç—Ç–∞–∂–∏</h4>
        <div className="form-row">
          <div className="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–±–æ—Ç–æ—á–Ω—ã—Ö</label>
            <input
              type="number"
              value={data.building?.technical?.telecomCount || 10}
              onChange={(e) => handleComplexChange('technical', 'telecomCount', Number(e.target.value))}
              min="0"
            />
          </div>

          <div className="form-group">
            <label>–ü–ª–æ—â–∞–¥—å —Å–ª–∞–±–æ—Ç–æ—á–Ω–æ–π (–º¬≤)</label>
            <input
              type="number"
              value={data.building?.technical?.telecomArea || 15}
              onChange={(e) => handleComplexChange('technical', 'telecomArea', Number(e.target.value))}
              min="0"
            />
          </div>
        </div>

        <div className="form-row">
          <div className="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —ç—Ç–∞–∂–µ–π</label>
            <input
              type="number"
              value={data.building?.technical?.techFloorCount || 3}
              onChange={(e) => handleComplexChange('technical', 'techFloorCount', Number(e.target.value))}
              min="0"
            />
          </div>

          <div className="form-group">
            <label>–ü–ª–æ—â–∞–¥—å —Ç–µ—Ö—ç—Ç–∞–∂–∞ (–º¬≤)</label>
            <input
              type="number"
              value={data.building?.technical?.techFloorArea || 500}
              onChange={(e) => handleComplexChange('technical', 'techFloorArea', Number(e.target.value))}
              min="0"
            />
          </div>
        </div>
      </div>
    </div>
  )

  const renderCorpusesTab = () => (
    <div className="tab-content">
      <div className="form-section">
        <h3>üèóÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–ø—É—Å–æ–≤</h3>

        <div className="form-row">
          <div className="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–ø—É—Å–æ–≤</label>
            <input
              type="number"
              value={data.building?.corpuses?.buildingCorpuses || 3}
              onChange={(e) => handleComplexChange('corpuses', 'buildingCorpuses', Number(e.target.value))}
              min="1"
              max="10"
            />
          </div>
        </div>

        <div className="toggle-section">
          <label className="toggle-label">
            <input
              type="checkbox"
              checked={useDetailedCorpuses}
              onChange={(e) => setUseDetailedCorpuses(e.target.checked)}
            />
            <span>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–∞–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞ –æ—Ç–¥–µ–ª—å–Ω–æ</span>
          </label>
        </div>

        {useDetailedCorpuses && (
          <div className="corpuses-grid">
            {Array.from({ length: data.building?.corpuses?.buildingCorpuses || 3 }, (_, i) => (
              <div key={i} className="corpus-item">
                <label>–ö–æ—Ä–ø—É—Å {i + 1} (—ç—Ç–∞–∂–µ–π)</label>
                <input
                  type="number"
                  value={data.building?.corpuses?.corpusesFloors?.[`corpus${i + 1}`] || 16}
                  onChange={(e) => handleComplexChange('corpuses', 'corpusesFloors', {
                    ...data.building?.corpuses?.corpusesFloors,
                    [`corpus${i + 1}`]: Number(e.target.value)
                  })}
                  min="1"
                  max="50"
                />
              </div>
            ))}
          </div>
        )}

        {useDetailedCorpuses && (
          <div className="corpuses-summary">
            <h4>üìä –ò—Ç–æ–≥–æ –ø–æ –∫–æ—Ä–ø—É—Å–∞–º:</h4>
            <div className="summary-grid">
              <div className="summary-item">
                <span>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç—Ç–∞–∂–Ω–æ—Å—Ç—å:</span>
                <span>{Math.max(...Object.values(data.building?.corpuses?.corpusesFloors || {}))}</span>
              </div>
              <div className="summary-item">
                <span>–û–±—â–∏–π –æ–±—ä–µ–º —ç—Ç–∞–∂–µ–π:</span>
                <span>{Object.values(data.building?.corpuses?.corpusesFloors || {}).reduce((sum, floors) => sum + floors, 0)}</span>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )

  return (
    <div className="step-content">
      <h2 className="step-title">–î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è</h2>
      <p className="step-description">
        –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ê–ü–°
      </p>

      {/* –¢–∞–±—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <div className="tabs-navigation">
        {tabs.map(tab => (
          <button
            key={tab.id}
            className={`tab-button ${activeTab === tab.id ? 'active' : ''}`}
            onClick={() => setActiveTab(tab.id)}
          >
            <span className="tab-icon">{tab.icon}</span>
            <span className="tab-title">{tab.title}</span>
          </button>
        ))}
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤ */}
      {activeTab === 'basic' && renderBasicTab()}
      {activeTab === 'apartments' && renderApartmentsTab()}
      {activeTab === 'rooms' && renderRoomsTab()}
      {activeTab === 'technical' && renderTechnicalTab()}
      {activeTab === 'corpuses' && renderCorpusesTab()}
    </div>
  )
}

export default BuildingStep