// –®–∞–≥ –º–∞—Å—Ç–µ—Ä–∞: –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
import React, { useState } from 'react'

const EquipmentStep = ({ data, onUpdate, errors }) => {
  const [activeTab, setActiveTab] = useState('detectors')

  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
  const equipmentModels = {
    detectors: {
      name: 'üîç –ü–æ–∂–∞—Ä–Ω—ã–µ –∏–∑–≤–µ—â–∞—Ç–µ–ª–∏',
      models: {
        'ip212-64-r3': '–ò–ü 212-64-R3 W2.02 Rubezh (–¥—ã–º–æ–≤–æ–π –∞–¥—Ä–µ—Å–Ω—ã–π)',
        'ip101-1a-r3': '–ò–ü 101-1–ê-R3 Rubezh (—Ç–µ–ø–ª–æ–≤–æ–π –∞–¥—Ä–µ—Å–Ω—ã–π)',
        'iz-1-r3': '–ò–ó-1-R3 (–∏–∑–æ–ª—è—Ç–æ—Ä –ª–∏–Ω–∏–π —Å–≤—è–∑–∏)',
        'ikz-r3': '–ò–ö–ó-R3 (–∏–∑–æ–ª—è—Ç–æ—Ä –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è)',
        'io-102-51': '–ò–û 102-51 –ù–† (—á–µ—Ä–Ω—ã–π) (–æ—Ö—Ä–∞–Ω–Ω—ã–π –∏–∑–≤–µ—â–∞—Ç–µ–ª—å)'
      }
    },
    controlPanels: {
      name: 'üñ•Ô∏è –ü—Ä–∏–±–æ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
      models: {
        'rubezh-2op': '–ü–ü–ö–û–ü 011249-2-1 "–†—É–±–µ–∂-2–û–ü" –ø—Ä–æ—Ç.R3',
        'rm-1-r3': '–†–ú-1-R3 (—Ä–µ–ª–µ–π–Ω—ã–π –º–æ–¥—É–ª—å 1 –∫–∞–Ω–∞–ª)',
        'rm-4-r3': '–†–ú-4-R3 (—Ä–µ–ª–µ–π–Ω—ã–π –º–æ–¥—É–ª—å 4 –∫–∞–Ω–∞–ª–∞)',
        'rm-1k-r3': '–†–ú-1–ö-R3 (—Ä–µ–ª–µ–π–Ω—ã–π –º–æ–¥—É–ª—å –∫–ª–∞–ø–∞–Ω–Ω—ã–π 1 –∫–∞–Ω–∞–ª)',
        'rm-4k-r3': '–†–ú-4–ö-R3 (—Ä–µ–ª–µ–π–Ω—ã–π –º–æ–¥—É–ª—å –∫–ª–∞–ø–∞–Ω–Ω—ã–π 4 –∫–∞–Ω–∞–ª–∞)',
        'am-1-r3': '–ê–ú-1-R3 (–∞–¥—Ä–µ—Å–Ω–∞—è –º–µ—Ç–∫–∞ 1-–∫–∞–Ω–∞–ª—å–Ω–∞—è)',
        'am-4-r3': '–ê–ú-4-R3 (–∞–¥—Ä–µ—Å–Ω–∞—è –º–µ—Ç–∫–∞ 4-–∫–∞–Ω–∞–ª—å–Ω–∞—è)',
        'mdu-1s-r3': '–ú–î–£-1–°-R3 (–º–æ–¥—É–ª—å –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)'
      }
    },
    manualCallPoints: {
      name: 'üö® –†—É—á–Ω—ã–µ –∏–∑–≤–µ—â–∞—Ç–µ–ª–∏',
      models: {
        'ipr513-3am-r3': '–ò–ü–† 513-3–ê–ú-R3 Rubezh (–∞–¥—Ä–µ—Å–Ω—ã–π)',
        'udp-513-11': '–£–î–ü 513-11 –ò–ö–ó-R3 "–ü—É—Å–∫ –¥—ã–º–æ—É–¥–∞–ª–µ–Ω–∏—è"'
      }
    },
    sounders: {
      name: 'üì¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è',
      models: {
        'opop124-r3': '–û–ü–û–ü 124-R3 (—Å–≤–µ—Ç–æ–∑–≤—É–∫–æ–≤–æ–π –∞–¥—Ä–µ—Å–Ω—ã–π)',
        'mayak-24-s': '–ú–∞—è–∫-24-–° (—Å–≤–µ—Ç–æ–≤–æ–π)',
        'mayak-24-kp': '–ú–∞—è–∫-24-–ö–ü (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)'
      }
    },
    powerSupplies: {
      name: 'üîå –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è',
      models: {
        'ivepr-24-r3': '–ò–í–≠–ü–† 24/2,5 RS-R3 Rubezh (–∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è)',
        'ups-battery-7ah': '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä Delta DTM 12012 (12–í 1.2–ê—á)'
      }
    },
    cables: {
      name: 'üîå –ö–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è',
      models: {
        'kpsrng-frls-2x2x0.5': '–ö–ü–°–†–Ω–≥(–ê)-FRLS 2—Ö2—Ö0.5 (–ø–æ–∂–∞—Ä–Ω—ã–π –∫–∞–±–µ–ª—å)',
        'kpsrng-frls-2x2x0.75': '–ö–ü–°–†–Ω–≥(–ê)-FRLS 2—Ö2—Ö0.75 (–ø–æ–∂–∞—Ä–Ω—ã–π –∫–∞–±–µ–ª—å)',
        'kpsrng-frls-4x2x0.5': '–ö–ü–°–†–Ω–≥(–ê)-FRLS 4—Ö2—Ö0.5 (–ø–æ–∂–∞—Ä–Ω—ã–π –∫–∞–±–µ–ª—å)',
        'kpsrng-frls-4x2x0.75': '–ö–ü–°–†–Ω–≥(–ê)-FRLS 4—Ö2—Ö0.75 (–ø–æ–∂–∞—Ä–Ω—ã–π –∫–∞–±–µ–ª—å)',
        'vvgng-frls-3x1.5': '–í–í–ì–Ω–≥(–ê)-FRLS 3—Ö1.5 (—Å–∏–ª–æ–≤–æ–π –∫–∞–±–µ–ª—å)',
        'vvgng-frls-3x2.5': '–í–í–ì–Ω–≥(–ê)-FRLS 3—Ö2.5 (—Å–∏–ª–æ–≤–æ–π –∫–∞–±–µ–ª—å)'
      }
    }
  }

  const tabs = [
    { id: 'detectors', title: '–ò–∑–≤–µ—â–∞—Ç–µ–ª–∏', icon: 'üîç' },
    { id: 'controlPanels', title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', icon: 'üñ•Ô∏è' },
    { id: 'manualCallPoints', title: '–†—É—á–Ω—ã–µ', icon: 'üö®' },
    { id: 'sounders', title: '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ', icon: 'üì¢' },
    { id: 'powerSupplies', title: '–ü–∏—Ç–∞–Ω–∏–µ', icon: 'üîå' },
    { id: 'cables', title: '–ö–∞–±–µ–ª–∏', icon: 'üîå' },
    { id: 'apsSettings', title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–ü–°', icon: '‚öôÔ∏è' }
  ]

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  React.useEffect(() => {
    if (!data.equipment) {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      const selectedModels = {}
      Object.keys(equipmentModels).forEach(category => {
        Object.keys(equipmentModels[category].models).forEach(model => {
          selectedModels[model] = true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω—ã
        })
      })

      onUpdate('equipment', {
        selectedModels,
        customEquipment: [],
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ê–ü–° (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
        apsSettings: {
          detectorCoverage: 85, // –°–æ–≥–ª–∞—Å–Ω–æ –°–ü 5.13130.2009
          manualCallDistance: 50, // –ù–æ—Ä–º–∞—Ç–∏–≤
          sounderCoverage: 15,
          cableReserve: 15, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø–∞—Å –∫–∞–±–µ–ª—è
          zoneSize: 300, // –ó–ö–ü–° —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä
          systemTypes: ['–∞–¥—Ä–µ—Å–Ω–∞—è'], // –¢–∏–ø—ã —Å–∏—Å—Ç–µ–º
          fireAlgorithms: ['B'], // –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ü–û–ñ–ê–†
          planningOptions: ['defined'], // –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏
          controlledSystems: ['–°–û–£–≠_1-3'], // –£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–∏—Å—Ç–µ–º—ã
          soueOptions: ['basic'], // –í–∞—Ä–∏–∞–Ω—Ç—ã –°–û–£–≠
          auptOptions: ['none'] // –í–∞—Ä–∏–∞–Ω—Ç—ã –ê–£–ü–¢
        }
      })
    }
  }, [])

  const handleModelToggle = (modelKey) => {
    const currentSelection = data.equipment?.selectedModels || {}
    onUpdate('equipment', {
      ...data.equipment,
      selectedModels: {
        ...currentSelection,
        [modelKey]: !currentSelection[modelKey]
      }
    })
  }

  const selectAllModelsInCategory = (category) => {
    const currentSelection = data.equipment?.selectedModels || {}
    const updated = { ...currentSelection }

    Object.keys(equipmentModels[category].models).forEach(model => {
      updated[model] = true
    })

    onUpdate('equipment', {
      ...data.equipment,
      selectedModels: updated
    })
  }

  const deselectAllModelsInCategory = (category) => {
    const currentSelection = data.equipment?.selectedModels || {}
    const updated = { ...currentSelection }

    Object.keys(equipmentModels[category].models).forEach(model => {
      updated[model] = false
    })

    onUpdate('equipment', {
      ...data.equipment,
      selectedModels: updated
    })
  }

  const addCustomEquipment = () => {
    const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:')
    if (name && name.trim()) {
      const currentCustom = data.equipment?.customEquipment || []
      onUpdate('equipment', {
        ...data.equipment,
        customEquipment: [...currentCustom, {
          id: Date.now(),
          name: name.trim(),
          category: 'custom',
          selected: true
        }]
      })
    }
  }

  const removeCustomEquipment = (id) => {
    const currentCustom = data.equipment?.customEquipment || []
    onUpdate('equipment', {
      ...data.equipment,
      customEquipment: currentCustom.filter(item => item.id !== id)
    })
  }

  const handleAPSSettingChange = (setting, value) => {
    onUpdate('equipment', {
      ...data.equipment,
      apsSettings: {
        ...data.equipment?.apsSettings,
        [setting]: value
      }
    })
  }

  const toggleArrayOption = (setting, value) => {
    const currentArray = data.equipment?.apsSettings?.[setting] || []
    const newArray = currentArray.includes(value)
      ? currentArray.filter(item => item !== value)
      : [...currentArray, value]

    handleAPSSettingChange(setting, newArray)
  }

  const renderEquipmentCategory = (categoryKey) => {
    const category = equipmentModels[categoryKey]
    if (!category) return null

    const selectedModels = data.equipment?.selectedModels || {}
    const selectedCount = Object.keys(category.models).filter(model => selectedModels[model]).length
    const totalCount = Object.keys(category.models).length

    return (
      <div className="tab-content">
        <div className="equipment-category">
          <div className="category-header">
            <h3>{category.name}</h3>
            <div className="category-controls">
              <span className="selection-count">
                –í—ã–±—Ä–∞–Ω–æ: {selectedCount} –∏–∑ {totalCount}
              </span>
              <button
                className="btn-secondary btn-sm"
                onClick={() => selectAllModelsInCategory(categoryKey)}
                type="button"
              >
                –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
              </button>
              <button
                className="btn-secondary btn-sm"
                onClick={() => deselectAllModelsInCategory(categoryKey)}
                type="button"
              >
                –°–Ω—è—Ç—å –≤—Å–µ
              </button>
            </div>
          </div>

          <div className="equipment-grid">
            {Object.entries(category.models).map(([modelKey, modelName]) => (
              <div key={modelKey} className="equipment-item">
                <label className="equipment-label">
                  <input
                    type="checkbox"
                    checked={selectedModels[modelKey] || false}
                    onChange={() => handleModelToggle(modelKey)}
                  />
                  <div className="equipment-info">
                    <span className="equipment-name">{modelName}</span>
                    <span className="equipment-key">{modelKey}</span>
                  </div>
                </label>
              </div>
            ))}
          </div>
        </div>

        {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        {categoryKey === 'powerSupplies' && (
          <div className="custom-equipment-section">
            <div className="section-header">
              <h4>üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h4>
              <button
                className="btn-primary btn-sm"
                onClick={addCustomEquipment}
                type="button"
              >
                + –î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
              </button>
            </div>

            <div className="custom-equipment-list">
              {(data.equipment?.customEquipment || []).map(item => (
                <div key={item.id} className="custom-equipment-item">
                  <span className="custom-equipment-name">{item.name}</span>
                  <button
                    className="btn-danger btn-sm"
                    onClick={() => removeCustomEquipment(item.id)}
                    type="button"
                  >
                    ‚úï
                  </button>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    )
  }

  const renderAPSSettingsTab = () => {
    const settings = data.equipment?.apsSettings || {}

    return (
      <div className="tab-content">
        <div className="aps-settings">
          <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ê–ü–°</h3>

          <div className="settings-section">
            <h4>üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</h4>
            <div className="form-row">
              <div className="form-group">
                <label>–ü–ª–æ—â–∞–¥—å –ø–æ–∫—Ä—ã—Ç–∏—è –∏–∑–≤–µ—â–∞—Ç–µ–ª—è (–º¬≤)</label>
                <input
                  type="number"
                  value={settings.detectorCoverage || 85}
                  onChange={(e) => handleAPSSettingChange('detectorCoverage', Number(e.target.value))}
                  min="50"
                  max="120"
                />
                <small>–°–æ–≥–ª–∞—Å–Ω–æ –°–ü 5.13130.2009</small>
              </div>

              <div className="form-group">
                <label>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä—É—á–Ω–æ–≥–æ –∏–∑–≤–µ—â–∞—Ç–µ–ª—è (–º)</label>
                <input
                  type="number"
                  value={settings.manualCallDistance || 50}
                  onChange={(e) => handleAPSSettingChange('manualCallDistance', Number(e.target.value))}
                  min="30"
                  max="60"
                />
                <small>–ù–æ—Ä–º–∞—Ç–∏–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</small>
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>–ü–ª–æ—â–∞–¥—å –ø–æ–∫—Ä—ã—Ç–∏—è –æ–ø–æ–≤–µ—â–∞—Ç–µ–ª—è (–º¬≤)</label>
                <input
                  type="number"
                  value={settings.sounderCoverage || 15}
                  onChange={(e) => handleAPSSettingChange('sounderCoverage', Number(e.target.value))}
                  min="10"
                  max="30"
                />
              </div>

              <div className="form-group">
                <label>–ó–∞–ø–∞—Å –∫–∞–±–µ–ª—è (%)</label>
                <input
                  type="number"
                  value={settings.cableReserve || 15}
                  onChange={(e) => handleAPSSettingChange('cableReserve', Number(e.target.value))}
                  min="10"
                  max="25"
                />
                <small>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø–∞—Å</small>
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>–†–∞–∑–º–µ—Ä –∑–æ–Ω—ã (–º¬≤)</label>
                <input
                  type="number"
                  value={settings.zoneSize || 300}
                  onChange={(e) => handleAPSSettingChange('zoneSize', Number(e.target.value))}
                  min="200"
                  max="500"
                />
                <small>–ó–ö–ü–° —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä</small>
              </div>
            </div>
          </div>

          <div className="settings-section">
            <h4>üîÑ –¢–∏–ø—ã —Å–∏—Å—Ç–µ–º</h4>
            <div className="checkbox-group">
              {['–∞–¥—Ä–µ—Å–Ω–∞—è', '–ø–æ—Ä–æ–≥–æ–≤–∞—è', '–∞–¥—Ä–µ—Å–Ω–æ-–∞–Ω–∞–ª–æ–≥–æ–≤–∞—è'].map(type => (
                <label key={type} className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={settings.systemTypes?.includes(type) || false}
                    onChange={() => toggleArrayOption('systemTypes', type)}
                  />
                  <span>{type}</span>
                </label>
              ))}
            </div>
          </div>

          <div className="settings-section">
            <h4>üî• –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ü–û–ñ–ê–†</h4>
            <div className="checkbox-group">
              {['A', 'B', 'C'].map(algorithm => (
                <label key={algorithm} className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={settings.fireAlgorithms?.includes(algorithm) || false}
                    onChange={() => toggleArrayOption('fireAlgorithms', algorithm)}
                  />
                  <span>–ê–ª–≥–æ—Ä–∏—Ç–º {algorithm}</span>
                </label>
              ))}
            </div>
          </div>

          <div className="settings-section">
            <h4>üèóÔ∏è –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏</h4>
            <div className="checkbox-group">
              {['defined', 'open', 'mixed'].map(option => (
                <label key={option} className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={settings.planningOptions?.includes(option) || false}
                    onChange={() => toggleArrayOption('planningOptions', option)}
                  />
                  <span>
                    {option === 'defined' && '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞'}
                    {option === 'open' && '–û—Ç–∫—Ä—ã—Ç–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞'}
                    {option === 'mixed' && '–°–º–µ—à–∞–Ω–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞'}
                  </span>
                </label>
              ))}
            </div>
          </div>

          <div className="settings-section">
            <h4>üéõÔ∏è –£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–∏—Å—Ç–µ–º—ã</h4>
            <div className="checkbox-group">
              {['–°–û–£–≠_1-3', '–°–û–£–≠_4-5', '–ê–£–ü–¢', '–î—ã–º–æ—É–¥–∞–ª–µ–Ω–∏–µ', '–õ–∏—Ñ—Ç—ã'].map(system => (
                <label key={system} className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={settings.controlledSystems?.includes(system) || false}
                    onChange={() => toggleArrayOption('controlledSystems', system)}
                  />
                  <span>{system}</span>
                </label>
              ))}
            </div>
          </div>

          <div className="settings-section">
            <h4>üì¢ –í–∞—Ä–∏–∞–Ω—Ç—ã –°–û–£–≠</h4>
            <div className="checkbox-group">
              {['basic', 'advanced', 'voice'].map(option => (
                <label key={option} className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={settings.soueOptions?.includes(option) || false}
                    onChange={() => toggleArrayOption('soueOptions', option)}
                  />
                  <span>
                    {option === 'basic' && '–ë–∞–∑–æ–≤–∞—è –°–û–£–≠'}
                    {option === 'advanced' && '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –°–û–£–≠'}
                    {option === 'voice' && '–†–µ—á–µ–≤–∞—è –°–û–£–≠'}
                  </span>
                </label>
              ))}
            </div>
          </div>

          <div className="settings-section">
            <h4>üöø –í–∞—Ä–∏–∞–Ω—Ç—ã –ê–£–ü–¢</h4>
            <div className="checkbox-group">
              {['none', 'water', 'foam', 'gas'].map(option => (
                <label key={option} className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={settings.auptOptions?.includes(option) || false}
                    onChange={() => toggleArrayOption('auptOptions', option)}
                  />
                  <span>
                    {option === 'none' && '–ë–µ–∑ –ê–£–ü–¢'}
                    {option === 'water' && '–í–æ–¥—è–Ω–æ–µ –ø–æ–∂–∞—Ä–æ—Ç—É—à–µ–Ω–∏–µ'}
                    {option === 'foam' && '–ü–µ–Ω–Ω–æ–µ –ø–æ–∂–∞—Ä–æ—Ç—É—à–µ–Ω–∏–µ'}
                    {option === 'gas' && '–ì–∞–∑–æ–≤–æ–µ –ø–æ–∂–∞—Ä–æ—Ç—É—à–µ–Ω–∏–µ'}
                  </span>
                </label>
              ))}
            </div>
          </div>
        </div>
      </div>
    )
  }

  // –ü–æ–¥—Å—á–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  const getSelectionSummary = () => {
    const selectedModels = data.equipment?.selectedModels || {}
    const customEquipment = data.equipment?.customEquipment || []

    const selectedByCategory = {}
    let totalSelected = 0

    Object.entries(equipmentModels).forEach(([categoryKey, category]) => {
      const selected = Object.keys(category.models).filter(model => selectedModels[model]).length
      selectedByCategory[categoryKey] = {
        selected,
        total: Object.keys(category.models).length,
        name: category.name
      }
      totalSelected += selected
    })

    return {
      byCategory: selectedByCategory,
      totalSelected: totalSelected + customEquipment.length,
      customCount: customEquipment.length
    }
  }

  const summary = getSelectionSummary()

  return (
    <div className="step-content">
      <h2 className="step-title">–î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ê–ü–°</h2>
      <p className="step-description">
        –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
      </p>

      {/* –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ */}
      <div className="equipment-summary">
        <h4>üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</h4>
        <div className="summary-grid">
          <div className="summary-item">
            <span>–í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ:</span>
            <span>{summary.totalSelected} –ø–æ–∑–∏—Ü–∏–π</span>
          </div>
          <div className="summary-item">
            <span>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ:</span>
            <span>{summary.customCount} –ø–æ–∑–∏—Ü–∏–π</span>
          </div>
        </div>
      </div>

      {/* –¢–∞–±—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <div className="tabs-navigation">
        {tabs.map(tab => (
          <button
            key={tab.id}
            className={`tab-button ${activeTab === tab.id ? 'active' : ''}`}
            onClick={() => setActiveTab(tab.id)}
          >
            <span className="tab-icon">{tab.icon}</span>
            <span className="tab-title">{tab.title}</span>
            {tab.id !== 'apsSettings' && summary.byCategory[tab.id] && (
              <span className="tab-count">
                {summary.byCategory[tab.id].selected}/{summary.byCategory[tab.id].total}
              </span>
            )}
          </button>
        ))}
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤ */}
      {activeTab === 'apsSettings' ? renderAPSSettingsTab() : renderEquipmentCategory(activeTab)}
    </div>
  )
}

export default EquipmentStep