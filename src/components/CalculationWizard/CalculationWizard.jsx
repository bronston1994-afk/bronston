// –ü–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä —Ä–∞—Å—á–µ—Ç–æ–≤ –ê–ü–°
import React, { useState, useEffect } from 'react'
import { useForm } from 'react-hook-form'
import BuildingStep from './steps/BuildingStep'
import EquipmentStep from './steps/EquipmentStep'
import CalculationStep from './steps/CalculationStep'
import ResultsStep from './steps/ResultsStep'
import './CalculationWizard.css'

const CalculationWizard = ({ project = null, onSave, onCancel }) => {
  const [currentStep, setCurrentStep] = useState(1)
  const [calculationData, setCalculationData] = useState({
    // –î–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è
    building: {
      aboveGroundArea: 5000,
      undergroundArea: 0,
      aboveGroundFloors: 10,
      undergroundFloors: 0,
      ceilingHeight: 3.0,
      buildingType: '–§1.3',
      apartmentsCount: 100,
      rooms: 50,
      fireLoadCategory: '',
      explosionHazardClass: ''
    },
    // –í—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    equipment: {
      selectedModels: {},
      customEquipment: [],
      useCustomOnly: false
    },
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
    calculation: {
      detectorCoverage: 85,
      manualCallDistance: 50,
      sounderCoverage: 15,
      cableReserve: 15,
      zoneSize: 300,
      systemTypes: ['–∞–¥—Ä–µ—Å–Ω–∞—è'],
      fireAlgorithms: ['B'],
      planningOptions: ['defined']
    },
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results: null
  })

  const [isCalculating, setIsCalculating] = useState(false)
  const [errors, setErrors] = useState({})

  // –®–∞–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
  const steps = [
    {
      id: 1,
      title: '–ó–¥–∞–Ω–∏–µ',
      subtitle: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞',
      icon: 'üè¢',
      component: BuildingStep
    },
    {
      id: 2,
      title: '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
      subtitle: '–í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π –ê–ü–°',
      icon: 'üîß',
      component: EquipmentStep
    },
    {
      id: 3,
      title: '–†–∞—Å—á–µ—Ç',
      subtitle: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞',
      icon: '‚öôÔ∏è',
      component: CalculationStep
    },
    {
      id: 4,
      title: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã',
      subtitle: '–ò—Ç–æ–≥–∏ —Ä–∞—Å—á–µ—Ç–∞',
      icon: 'üìä',
      component: ResultsStep
    }
  ]

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (project) {
      setCalculationData(prev => ({
        ...prev,
        building: {
          ...prev.building,
          buildingType: project.building_types?.code || '–§1.3',
          fireLoadCategory: project.fire_load_category || '',
          explosionHazardClass: project.explosion_hazard_class || ''
        }
      }))
    }
  }, [project])

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  const nextStep = () => {
    if (validateCurrentStep()) {
      if (currentStep === 3) {
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        performCalculation()
      }
      setCurrentStep(prev => Math.min(prev + 1, steps.length))
    }
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1))
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —à–∞–≥—É
  const goToStep = (stepNumber) => {
    if (stepNumber <= currentStep || validateStepsUpTo(stepNumber - 1)) {
      setCurrentStep(stepNumber)
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
  const validateCurrentStep = () => {
    const stepErrors = {}

    switch (currentStep) {
      case 1: // –ó–¥–∞–Ω–∏–µ
        if (!calculationData.building.aboveGroundArea || calculationData.building.aboveGroundArea <= 0) {
          stepErrors.aboveGroundArea = '–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
        }
        if (!calculationData.building.aboveGroundFloors || calculationData.building.aboveGroundFloors <= 0) {
          stepErrors.aboveGroundFloors = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
        }
        if (!calculationData.building.buildingType) {
          stepErrors.buildingType = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–¥–∞–Ω–∏—è'
        }
        break

      case 2: // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        const hasSelectedEquipment = Object.values(calculationData.equipment.selectedModels).some(Boolean) ||
                                   calculationData.equipment.customEquipment.length > 0
        if (!hasSelectedEquipment) {
          stepErrors.equipment = '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–¥–µ–ª—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
        }
        break

      case 3: // –†–∞—Å—á–µ—Ç
        if (!calculationData.calculation.systemTypes.length) {
          stepErrors.systemTypes = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã'
        }
        break
    }

    setErrors(stepErrors)
    return Object.keys(stepErrors).length === 0
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–æ–≤ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
  const validateStepsUpTo = (stepNumber) => {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    return true
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
  const performCalculation = async () => {
    setIsCalculating(true)

    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
      await new Promise(resolve => setTimeout(resolve, 2000))

      const results = calculateAPS(calculationData)

      setCalculationData(prev => ({
        ...prev,
        results
      }))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:', error)
      setErrors({ calculation: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞' })
    } finally {
      setIsCalculating(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ê–ü–° (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  const calculateAPS = (data) => {
    const { building, equipment, calculation } = data
    const totalArea = building.aboveGroundArea + building.undergroundArea

    // –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    const smokeDetectors = Math.ceil(totalArea / calculation.detectorCoverage * 0.8)
    const heatDetectors = Math.ceil(totalArea / calculation.detectorCoverage * 0.2)
    const manualCallPoints = Math.ceil(building.aboveGroundFloors * 2)
    const sounders = Math.ceil(totalArea / (calculation.sounderCoverage * calculation.sounderCoverage * Math.PI))
    const zones = Math.ceil(totalArea / calculation.zoneSize)
    const controlPanels = Math.max(1, Math.ceil(zones / 4))

    // –ö–∞–±–µ–ª—å
    const cableLength = Math.ceil(totalArea * 0.1 * (1 + calculation.cableReserve / 100))

    // –°—Ç–æ–∏–º–æ—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
    const totalCost = smokeDetectors * 2500 + heatDetectors * 1800 +
                     manualCallPoints * 1200 + sounders * 800 +
                     controlPanels * 45000 + cableLength * 150

    return {
      smokeDetectors,
      heatDetectors,
      manualCallPoints,
      sounders,
      zones,
      controlPanels,
      cableLength,
      totalCost,
      calculationDate: new Date().toISOString(),
      summary: {
        totalDetectors: smokeDetectors + heatDetectors,
        totalDevices: smokeDetectors + heatDetectors + manualCallPoints + sounders,
        coverageArea: totalArea,
        costPerSquareMeter: Math.round(totalCost / totalArea)
      }
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–∞
  const updateStepData = (stepKey, data) => {
    setCalculationData(prev => ({
      ...prev,
      [stepKey]: {
        ...prev[stepKey],
        ...data
      }
    }))
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
  const handleSave = async () => {
    try {
      const saveData = {
        projectId: project?.id,
        calculationType: '–ø–æ—à–∞–≥–æ–≤—ã–π_–º–∞—Å—Ç–µ—Ä',
        parameters: {
          building: calculationData.building,
          equipment: calculationData.equipment,
          calculation: calculationData.calculation
        },
        results: calculationData.results,
        calculatedBy: 'current-user-id', // –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        notes: `–†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ –ø–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä`
      }

      await onSave(saveData)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error)
      setErrors({ save: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞' })
    }
  }

  const CurrentStepComponent = steps[currentStep - 1]?.component

  return (
    <div className="calculation-wizard">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="wizard-header">
        <h2>–ú–∞—Å—Ç–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –ê–ü–°</h2>
        {project && (
          <div className="project-info">
            <span className="project-name">{project.name}</span>
            <span className="project-object">{project.object_name}</span>
          </div>
        )}
        <button className="close-button" onClick={onCancel}>‚úï</button>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
      <div className="wizard-progress">
        <div className="steps-indicator">
          {steps.map((step, index) => (
            <div
              key={step.id}
              className={`step-indicator ${currentStep === step.id ? 'active' : ''} ${currentStep > step.id ? 'completed' : ''}`}
              onClick={() => goToStep(step.id)}
            >
              <div className="step-circle">
                {currentStep > step.id ? '‚úì' : step.icon}
              </div>
              <div className="step-info">
                <div className="step-title">{step.title}</div>
                <div className="step-subtitle">{step.subtitle}</div>
              </div>
            </div>
          ))}
        </div>
        <div className="progress-bar">
          <div
            className="progress-fill"
            style={{ width: `${((currentStep - 1) / (steps.length - 1)) * 100}%` }}
          />
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ */}
      <div className="wizard-content">
        {CurrentStepComponent && (
          <CurrentStepComponent
            data={calculationData}
            onUpdate={updateStepData}
            errors={errors}
            isCalculating={isCalculating}
            project={project}
          />
        )}
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="wizard-navigation">
        <div className="nav-left">
          {currentStep > 1 && (
            <button
              className="btn-secondary"
              onClick={prevStep}
              disabled={isCalculating}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
          )}
        </div>

        <div className="nav-center">
          <span className="step-counter">
            –®–∞–≥ {currentStep} –∏–∑ {steps.length}
          </span>
        </div>

        <div className="nav-right">
          {currentStep < steps.length ? (
            <button
              className="btn-primary"
              onClick={nextStep}
              disabled={isCalculating}
            >
              {currentStep === 3 ? '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å' : '–î–∞–ª–µ–µ'} ‚Üí
            </button>
          ) : (
            <div className="final-actions">
              <button
                className="btn-secondary"
                onClick={onCancel}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
              <button
                className="btn-primary"
                onClick={handleSave}
                disabled={!calculationData.results}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç
              </button>
            </div>
          )}
        </div>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isCalculating && (
        <div className="calculation-loading">
          <div className="loading-overlay">
            <div className="loading-spinner"></div>
            <p>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç –ê–ü–°...</p>
          </div>
        </div>
      )}
    </div>
  )
}

export default CalculationWizard