import { useState } from 'react'

function App() {
  const [area, setArea] = useState(1000)
  const [floors, setFloors] = useState(3)
  const [rooms, setRooms] = useState(25)
  const [height, setHeight] = useState(3.0)
  const [buildingType, setBuildingType] = useState('office')
  const [detectorCoverage, setDetectorCoverage] = useState(25)
  const [manualCallDistance, setManualCallDistance] = useState(50)
  const [sounderCoverage, setSounderCoverage] = useState(15)
  const [cableReserve, setCableReserve] = useState(15)
  const [zoneSize, setZoneSize] = useState(500)
  const [results, setResults] = useState(null)

  const calculateEquipment = () => {
    // –†–∞—Å—á—ë—Ç –¥–∞—Ç—á–∏–∫–æ–≤
    const totalDetectors = Math.ceil(area / detectorCoverage)
    
    // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ç–∏–ø—ã –¥–∞—Ç—á–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–¥–∞–Ω–∏—è
    let smokeDetectors, heatDetectors
    switch(buildingType) {
      case 'warehouse':
        smokeDetectors = Math.ceil(totalDetectors * 0.3)
        heatDetectors = Math.ceil(totalDetectors * 0.7)
        break
      case 'industrial':
        smokeDetectors = Math.ceil(totalDetectors * 0.4)
        heatDetectors = Math.ceil(totalDetectors * 0.6)
        break
      default:
        smokeDetectors = Math.ceil(totalDetectors * 0.8)
        heatDetectors = Math.ceil(totalDetectors * 0.2)
    }

    // –†–∞—Å—á—ë—Ç –∑–æ–Ω
    const zones = Math.ceil(area / zoneSize)
    
    // –ü—Ä–∏—ë–º–Ω–æ-–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã (1 –Ω–∞ 4 –∑–æ–Ω—ã, –º–∏–Ω–∏–º—É–º 1)
    const controlPanels = Math.max(1, Math.ceil(zones / 4))

    // –†—É—á–Ω—ã–µ –∏–∑–≤–µ—â–∞—Ç–µ–ª–∏ (–ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É + –≤ –ø–æ–º–µ—â–µ–Ω–∏—è—Ö)
    const perimeter = 2 * Math.sqrt(area * 2) // –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–º–µ—Ç—Ä
    const manualCallPoints = Math.ceil(perimeter / manualCallDistance) + Math.ceil(rooms / 4)

    // –û–ø–æ–≤–µ—â–∞—Ç–µ–ª–∏
    const sounderArea = Math.PI * Math.pow(sounderCoverage, 2)
    const sounders = Math.ceil(area / sounderArea)
    const beacons = Math.ceil(sounders * 0.5) // 50% —Å–≤–µ—Ç–æ–≤—ã—Ö –æ—Ç –∑–≤—É–∫–æ–≤—ã—Ö

    // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –∏ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã
    const powerSupplies = Math.ceil(zones / 2)
    const batteries = powerSupplies * 2 // –ø–æ 2 –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ –ò–ü

    // –ú–æ–Ω—Ç–∞–∂–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏ (–ø–æ 1 –Ω–∞ –∫–∞–∂–¥—ã–µ 2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
    const boxes = Math.ceil((totalDetectors + manualCallPoints + sounders + beacons) / 2)

    // –†–∞—Å—á—ë—Ç –∫–∞–±–µ–ª—è
    const avgCableRun = Math.sqrt(area) // —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏
    const cableMultiplier = 1 + (cableReserve / 100)
    
    const loopCable = Math.ceil(totalDetectors * avgCableRun * 0.8 * cableMultiplier)
    const powerCable = Math.ceil(powerSupplies * avgCableRun * 0.6 * cableMultiplier)
    const sounderCable = Math.ceil(sounders * avgCableRun * 0.7 * cableMultiplier)

    setResults({
      smokeDetectors,
      heatDetectors,
      totalDetectors,
      controlPanels,
      manualCallPoints,
      sounders,
      beacons,
      powerSupplies,
      batteries,
      boxes,
      zones,
      loopCable,
      powerCable,
      sounderCable
    })
  }

  const styles = {
    body: {
      fontFamily: 'Segoe UI, Tahoma, Geneva, Verdana, sans-serif',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      minHeight: '100vh',
      margin: 0,
      padding: '20px'
    },
    container: {
      maxWidth: '1400px',
      margin: '0 auto',
      background: 'rgba(255, 255, 255, 0.95)',
      borderRadius: '20px',
      boxShadow: '0 20px 40px rgba(0, 0, 0, 0.1)',
      overflow: 'hidden'
    },
    header: {
      background: 'linear-gradient(45deg, #ff6b6b, #ee5a24)',
      color: 'white',
      padding: '30px',
      textAlign: 'center'
    },
    headerTitle: {
      fontSize: '2.5em',
      marginBottom: '10px',
      textShadow: '2px 2px 4px rgba(0,0,0,0.3)'
    },
    headerSubtitle: {
      fontSize: '1.2em',
      opacity: 0.9
    },
    mainContent: {
      display: 'grid',
      gridTemplateColumns: '1fr 1fr',
      gap: '30px',
      padding: '30px'
    },
    section: {
      background: 'white',
      borderRadius: '15px',
      padding: '25px',
      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)',
      transition: 'transform 0.3s ease, box-shadow 0.3s ease'
    },
    sectionTitle: {
      fontSize: '1.5em',
      color: '#2c3e50',
      marginBottom: '20px',
      paddingBottom: '10px',
      borderBottom: '3px solid #3498db',
      display: 'flex',
      alignItems: 'center',
      gap: '10px'
    },
    inputGroup: {
      marginBottom: '20px'
    },
    label: {
      display: 'block',
      marginBottom: '8px',
      fontWeight: 600,
      color: '#2c3e50',
      fontSize: '0.9em'
    },
    input: {
      width: '100%',
      padding: '12px 15px',
      border: '2px solid #e0e6ed',
      borderRadius: '10px',
      fontSize: '1em',
      transition: 'all 0.3s ease',
      background: '#f8f9fa',
      boxSizing: 'border-box'
    },
    calculateBtn: {
      background: 'linear-gradient(45deg, #3498db, #2980b9)',
      color: 'white',
      border: 'none',
      padding: '15px 30px',
      borderRadius: '10px',
      fontSize: '1.1em',
      fontWeight: 600,
      cursor: 'pointer',
      transition: 'all 0.3s ease',
      width: '100%',
      marginTop: '20px'
    },
    results: {
      gridColumn: '1 / -1',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      color: 'white',
      borderRadius: '15px',
      padding: '30px',
      marginTop: '10px'
    },
    resultsGrid: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
      gap: '20px',
      marginTop: '20px'
    },
    resultCard: {
      background: 'rgba(255, 255, 255, 0.1)',
      borderRadius: '10px',
      padding: '20px',
      backdropFilter: 'blur(10px)',
      border: '1px solid rgba(255, 255, 255, 0.2)'
    },
    resultCardTitle: {
      marginBottom: '15px',
      color: '#fff',
      fontSize: '1.2em'
    },
    resultItem: {
      display: 'flex',
      justifyContent: 'space-between',
      marginBottom: '10px',
      padding: '8px 0',
      borderBottom: '1px solid rgba(255, 255, 255, 0.1)'
    },
    resultValue: {
      fontWeight: 600,
      color: '#ffd700'
    }
  }

  return (
    <div style={styles.body}>
      <div style={styles.container}>
        <div style={styles.header}>
          <h1 style={styles.headerTitle}>üî• –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ê–ü–°</h1>
          <p style={styles.headerSubtitle}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è - –†–∞—Å—á—ë—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –∫–∞–±–µ–ª—è</p>
        </div>

        <div style={styles.mainContent}>
          <div style={styles.section}>
            <h2 style={styles.sectionTitle}>
              <span>üè¢</span>
              –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞
            </h2>
            
            <div style={styles.inputGroup}>
              <label style={styles.label}>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ (–º¬≤)</label>
              <input 
                type="number" 
                value={area} 
                onChange={(e) => setArea(Number(e.target.value))}
                style={styles.input}
              />
            </div>

            <div style={styles.inputGroup}>
              <label style={styles.label}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π</label>
              <input 
                type="number" 
                value={floors} 
                onChange={(e) => setFloors(Number(e.target.value))}
                style={styles.input}
              />
            </div>

            <div style={styles.inputGroup}>
              <label style={styles.label}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–µ—â–µ–Ω–∏–π</label>
              <input 
                type="number" 
                value={rooms} 
                onChange={(e) => setRooms(Number(e.target.value))}
                style={styles.input}
              />
            </div>

            <div style={styles.inputGroup}>
              <label style={styles.label}>–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)</label>
              <input 
                type="number" 
                step="0.1" 
                value={height} 
                onChange={(e) => setHeight(Number(e.target.value))}
                style={styles.input}
              />
            </div>

            <div style={styles.inputGroup}>
              <label style={styles.label}>–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞</label>
              <select 
                value={buildingType} 
                onChange={(e) => setBuildingType(e.target.value)}
                style={styles.input}
              >
                <option value="office">–û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ</option>
                <option value="warehouse">–°–∫–ª–∞–¥—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ</option>
                <option value="residential">–ñ–∏–ª–æ–µ –∑–¥–∞–Ω–∏–µ</option>
                <option value="industrial">–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ</option>
                <option value="commercial">–¢–æ—Ä–≥–æ–≤–æ–µ</option>
              </select>
            </div>
          </div>

          <div style={styles.section}>
            <h2 style={styles.sectionTitle}>
              <span>‚öôÔ∏è</span>
              –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            </h2>

            <div style={styles.inputGroup}>
              <label style={styles.label}>–ü–ª–æ—â–∞–¥—å –ø–æ–∫—Ä—ã—Ç–∏—è 1 –¥–∞—Ç—á–∏–∫–∞ (–º¬≤)</label>
              <input 
                type="number" 
                value={detectorCoverage} 
                onChange={(e) => setDetectorCoverage(Number(e.target.value))}
                style={styles.input}
              />
            </div>

            <div style={styles.inputGroup}>
              <label style={styles.label}>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ò–ü–† (–º)</label>
              <input 
                type="number" 
                value={manualCallDistance} 
                onChange={(e) => setManualCallDistance(Number(e.target.value))}
                style={styles.input}
              />
            </div>

            <div style={styles.inputGroup}>
              <label style={styles.label}>–†–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–æ–≤–µ—â–∞—Ç–µ–ª—è (–º)</label>
              <input 
                type="number" 
                value={sounderCoverage} 
                onChange={(e) => setSounderCoverage(Number(e.target.value))}
                style={styles.input}
              />
            </div>

            <div style={styles.inputGroup}>
              <label style={styles.label}>–ó–∞–ø–∞—Å –∫–∞–±–µ–ª—è (%)</label>
              <input 
                type="number" 
                value={cableReserve} 
                onChange={(e) => setCableReserve(Number(e.target.value))}
                style={styles.input}
              />
            </div>

            <div style={styles.inputGroup}>
              <label style={styles.label}>–†–∞–∑–º–µ—Ä –∑–æ–Ω—ã (–º¬≤)</label>
              <input 
                type="number" 
                value={zoneSize} 
                onChange={(e) => setZoneSize(Number(e.target.value))}
                style={styles.input}
              />
            </div>

            <button style={styles.calculateBtn} onClick={calculateEquipment}>
              üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
            </button>
          </div>

          {results && (
            <div style={styles.results}>
              <h2 style={styles.sectionTitle}>
                <span>üìä</span>
                –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞
              </h2>
              
              <div style={styles.resultsGrid}>
                <div style={styles.resultCard}>
                  <h3 style={styles.resultCardTitle}>üîç –î–∞—Ç—á–∏–∫–∏ –ø–æ–∂–∞—Ä–Ω–æ–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏</h3>
                  <div style={styles.resultItem}>
                    <span>–î—ã–º–æ–≤—ã–µ –¥–∞—Ç—á–∏–∫–∏:</span>
                    <span style={styles.resultValue}>{results.smokeDetectors} —à—Ç.</span>
                  </div>
                  <div style={styles.resultItem}>
                    <span>–¢–µ–ø–ª–æ–≤—ã–µ –¥–∞—Ç—á–∏–∫–∏:</span>
                    <span style={styles.resultValue}>{results.heatDetectors} —à—Ç.</span>
                  </div>
                  <div style={styles.resultItem}>
                    <span>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
                    <span style={styles.resultValue}>{results.totalDetectors} —à—Ç.</span>
                  </div>
                </div>

                <div style={styles.resultCard}>
                  <h3 style={styles.resultCardTitle}>üö® –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è</h3>
                  <div style={styles.resultItem}>
                    <span>–ü—Ä–∏—ë–º–Ω–æ-–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã:</span>
                    <span style={styles.resultValue}>{results.controlPanels} —à—Ç.</span>
                  </div>
                  <div style={styles.resultItem}>
                    <span>–ò–∑–≤–µ—â–∞—Ç–µ–ª–∏ —Ä—É—á–Ω—ã–µ (–ò–ü–†):</span>
                    <span style={styles.resultValue}>{results.manualCallPoints} —à—Ç.</span>
                  </div>
                  <div style={styles.resultItem}>
                    <span>–ó–≤—É–∫–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–∞—Ç–µ–ª–∏:</span>
                    <span style={styles.resultValue}>{results.sounders} —à—Ç.</span>
                  </div>
                  <div style={styles.resultItem}>
                    <span>–°–≤–µ—Ç–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–∞—Ç–µ–ª–∏:</span>
                    <span style={styles.resultValue}>{results.beacons} —à—Ç.</span>
                  </div>
                </div>

                <div style={styles.resultCard}>
                  <h3 style={styles.resultCardTitle}>üîå –ö–∞–±–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è</h3>
                  <div style={styles.resultItem}>
                    <span>–ö–∞–±–µ–ª—å —à–ª–µ–π—Ñ–∞ (–ö–ü–°–Ω–≥(–ê)-FRLS 1x2x0.75):</span>
                    <span style={styles.resultValue}>{results.loopCable} –º</span>
                  </div>
                  <div style={styles.resultItem}>
                    <span>–ö–∞–±–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è (–í–í–ì–Ω–≥(–ê)-LS 3x1.5):</span>
                    <span style={styles.resultValue}>{results.powerCable} –º</span>
                  </div>
                  <div style={styles.resultItem}>
                    <span>–ö–∞–±–µ–ª—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–ö–ü–°–Ω–≥(–ê)-FRLS 1x2x1.5):</span>
                    <span style={styles.resultValue}>{results.sounderCable} –º</span>
                  </div>
                </div>

                <div style={styles.resultCard}>
                  <h3 style={styles.resultCardTitle}>üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h3>
                  <div style={styles.resultItem}>
                    <span>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è:</span>
                    <span style={styles.resultValue}>{results.powerSupplies} —à—Ç.</span>
                  </div>
                  <div style={styles.resultItem}>
                    <span>–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã 12–í 7–ê—á:</span>
                    <span style={styles.resultValue}>{results.batteries} —à—Ç.</span>
                  </div>
                  <div style={styles.resultItem}>
                    <span>–ú–æ–Ω—Ç–∞–∂–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏:</span>
                    <span style={styles.resultValue}>{results.boxes} —à—Ç.</span>
                  </div>
                  <div style={styles.resultItem}>
                    <span>–†–∞—Å—á—ë—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–Ω:</span>
                    <span style={styles.resultValue}>{results.zones} –∑–æ–Ω</span>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default App
